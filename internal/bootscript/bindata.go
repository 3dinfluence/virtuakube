// Code generated by go-bindata. DO NOT EDIT.
// sources:
// client.sh (698B)
// master.sh (912B)
// node.sh (249B)

package bootscript

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientSh = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\x31\x6f\x1b\x31\x0c\x85\x77\xfd\x8a\x57\xb7\xab\x7d\xb1\xe3\x18\x29\x9c\x76\x4b\x01\x4f\xcd\xd0\xa1\xab\x4e\x47\xfb\x88\xd3\x89\x82\x48\x1b\x2e\x82\xfc\xf7\x42\x97\xa6\x70\xda\x4e\xcd\x42\xe0\x01\x4f\x1f\x1f\x45\xbe\x7f\xd7\xb4\x9c\x9a\xd6\x6b\xef\x9c\x92\x61\x4e\xc7\xb3\x20\x73\xa6\xbd\xe7\xe8\x9c\x15\x9f\x31\x33\x39\x86\x1e\x4d\x2f\x6a\x4d\x2b\x62\x1a\x0a\x67\x9b\x77\x92\x68\x86\xfb\xef\xbb\x6f\xce\xed\x1e\x3e\x2d\x3f\xae\x16\xcb\xcd\xed\xe2\xe6\x6a\x71\xed\x38\xc3\x77\x5d\xa9\x05\x1f\x1e\x77\x0f\x4f\xcd\x6a\x8d\x8e\x4e\xa0\xa4\x6b\x57\x49\xc9\x8f\x14\x2c\x42\xc9\xe6\x2f\x1a\x21\x32\x25\x73\x2e\x78\xc3\xe7\x86\x2c\x34\x2d\x97\x6e\x2a\x8b\x20\x69\x8f\xbb\xbb\xfb\xaf\x5f\x5c\x91\xa3\x51\x01\xff\x62\x6f\x9d\xcb\x45\x4c\x82\x44\x0c\x54\x12\x45\x3c\x3a\x20\x53\x51\x56\xdb\x3a\x60\xa4\x72\x20\x64\x6f\xbd\x56\xa9\xc1\x27\x18\x8f\x84\xcd\x55\xd5\x3c\x66\x29\x86\x24\x89\xaa\xa4\xf3\x24\x7d\x8c\x5b\xf7\x74\xc1\xee\xe8\xc4\x81\x26\xf6\x6b\xc2\x2b\x13\x17\x0a\x36\x99\x38\x19\x95\xbd\x0f\x84\x59\x1d\x7b\x56\xd9\xa1\xa7\x30\x20\x72\x1a\x2e\x1a\xff\xd5\xa9\x3d\x64\x0c\xb7\x3a\x7a\xad\x73\x56\x56\x94\xe0\x23\xbc\x62\xb3\xbe\x59\x5e\xd7\xb7\xd9\xab\xf2\x69\x0a\x9c\x88\x0f\x7d\x2b\x05\x17\x3b\x58\xbe\x98\x57\xcf\x8e\xb3\xa1\x97\x0c\xa5\xb8\xff\xb3\xf3\xef\x89\x9f\x3f\xe0\x1f\x41\x92\x74\xf4\x7f\x31\x56\x6f\x88\x51\x57\xad\x3f\xd4\x68\xac\x87\x52\x48\xcd\x17\x43\x3d\x06\xf7\x33\x00\x00\xff\xff\x86\x8f\xe8\xe4\xba\x02\x00\x00"

func clientShBytes() ([]byte, error) {
	return bindataRead(
		_clientSh,
		"client.sh",
	)
}

func clientSh() (*asset, error) {
	bytes, err := clientShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0xff, 0x78, 0x58, 0xc, 0x94, 0x36, 0xb8, 0x14, 0x8, 0xfb, 0xf7, 0xb8, 0xb8, 0x84, 0xd3, 0x64, 0x30, 0xf9, 0x18, 0xca, 0x68, 0x9, 0xfb, 0xe6, 0x35, 0x28, 0x54, 0x45, 0xdf, 0xe0, 0xcd}}
	return a, nil
}

var _masterSh = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xc1\x6e\x13\x31\x10\xbd\xfb\x2b\x06\xd3\x03\x1c\x6c\x67\x43\x05\x68\xd5\x56\x2a\x51\x8a\xaa\x4a\x89\x44\xa0\x77\xef\x7a\x92\xb5\xe2\xb5\x2d\x7b\x76\x69\x84\xf8\x77\xb4\x9b\xa5\x51\x28\x97\xfa\x62\xcb\xe3\xf7\xe6\xbd\x37\x7e\xfb\x46\x55\xd6\xab\x4a\xe7\x86\xb1\x8c\x04\x02\xbb\xa7\x00\xd1\x46\xdc\x6a\xeb\x18\x7b\x5c\x7e\xdb\xdc\xaf\x57\xd7\xbc\x2f\x64\x31\x97\x73\xce\x58\xad\x09\x6e\x14\xb5\x51\xed\xbb\x0a\xb5\x69\x65\x1d\xfc\x16\xae\xae\x96\xeb\x3b\xa6\xa3\x7d\xc4\x94\x6d\xf0\x25\xfc\x2d\xef\x3f\x67\x69\x83\xea\x0b\xed\x62\xa3\x3f\xb0\xbd\xf5\xa6\x84\x7b\x6f\x69\x11\xfc\xd6\xee\xba\xa4\xc9\x06\xcf\xaa\x10\x28\x53\xd2\xf1\x7b\xd8\xa3\xcf\x25\x13\x40\xc3\xa9\x04\x3e\x1b\x97\x9c\xfd\xb3\x38\x03\x20\x72\x25\xf0\xf9\x65\xc3\x87\xe6\x4b\x6f\x62\xb0\x9e\x4a\x06\xa0\x4d\x8f\x89\x6c\xc6\x5b\x63\x12\xe6\x5c\xc2\xc5\xbb\x06\xb5\x01\x51\x80\x6a\x42\x26\x65\xe3\x7b\x26\x84\x78\x85\xea\x85\xeb\x32\x61\x3a\x17\xee\x91\x7e\x86\xb4\xb7\x7e\x37\xb4\x8d\xc1\x6c\xba\xca\x23\x95\xc0\x8b\x99\xbc\x9c\xcb\x99\x9c\xa9\xe2\x23\x67\x03\x75\xf2\x48\x98\x9f\xbb\xf1\x8b\x5f\x53\xc4\xbf\x39\xab\x8f\xe4\x2b\xdd\x62\x09\xbc\xb7\x89\x3a\x3d\x60\x46\x67\x1b\x4c\x3d\xa6\x05\x26\xda\xdc\xae\xc6\x70\x78\x31\xff\x34\x70\xcb\x82\xff\xd7\x85\x43\x1a\x47\x63\x77\x27\x33\x15\x92\x2e\x26\x2f\x0f\xc7\x37\xe7\x5e\x12\xe6\xe0\xfa\xe1\xae\x04\x95\x3a\xaf\xf2\x21\x13\xb6\x46\x1d\x0b\x38\xed\x23\x31\x1b\x26\x8e\x75\x13\x80\xe3\x53\x0c\x89\xe0\xe1\xc7\x97\xe5\x62\xbd\xba\xbb\xff\x7a\xad\x90\x6a\x75\x72\xac\xb4\x69\xad\x1f\x61\x1c\x6e\xc6\x62\x4c\x61\x6b\x1d\x4a\xa3\x06\x79\xb9\x61\x53\xf4\x60\xbd\x25\x10\xe2\xa8\xfd\xfa\xc5\x57\x63\xaf\x69\x36\x92\xd6\xe4\x80\xb4\xf5\x04\x3e\x18\xcc\x20\x84\x76\x6e\x3c\x8b\x14\x1c\xca\x13\x72\x48\xa9\xd5\xc3\x14\xc4\x33\x52\xc7\xe8\x0e\x20\xb6\xd3\xa7\xd1\xc6\x04\x9f\xe5\x41\xb7\x8e\xd5\x11\x2e\x4e\x32\xa6\x07\x23\xee\x98\x3b\xb5\x91\xb5\xfd\x09\x7b\x5e\x7a\x71\xc9\xfe\x04\x00\x00\xff\xff\x4e\x0a\xea\xdb\x90\x03\x00\x00"

func masterShBytes() ([]byte, error) {
	return bindataRead(
		_masterSh,
		"master.sh",
	)
}

func masterSh() (*asset, error) {
	bytes, err := masterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4e, 0xf7, 0x61, 0x4d, 0x2d, 0xbc, 0x36, 0xc7, 0x45, 0xee, 0x0, 0x9b, 0x36, 0xd3, 0x7c, 0x62, 0x66, 0x90, 0xee, 0xdc, 0x96, 0xf3, 0x27, 0xe3, 0xce, 0xd8, 0x57, 0x17, 0xaa, 0x66, 0xfb, 0x3b}}
	return a, nil
}

var _nodeSh = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\xb1\x4e\xc3\x40\x0c\x80\xe1\xfd\x9e\xc2\x84\x4a\x85\xc1\x4d\x11\x15\x03\x52\x87\x0e\x91\x60\x28\x48\x34\x03\x1b\x72\x2e\x8e\x62\x92\x9c\xa3\x3b\x5f\x05\x02\xde\x1d\x41\xb7\xfe\xf3\x37\xfc\x97\x17\x65\x23\xa1\x6c\x28\xf5\xce\x25\x36\x40\xce\x1f\x0a\xb3\xcc\xdc\x91\x8c\xce\x59\xa4\x19\x0a\xd3\xec\x7b\x28\x7b\x4d\x56\x36\xaa\x96\x7c\x94\xd9\xb0\xd5\xc0\x05\x54\xaf\x8f\xb5\x73\xfb\xdd\xa1\xae\x5e\xde\x1e\x9e\x0f\xf5\xd3\x6e\x5f\x6d\x8b\xc5\xd5\x1f\x0f\x34\x31\x7c\x83\xcf\x06\xd8\xdd\x00\xb6\x4b\x5c\x5e\xe3\x44\xc9\x38\x16\xce\x0d\xb9\x61\x6a\x27\x78\x57\x09\x80\x68\x3a\x70\xd8\xae\xff\x5b\xad\xcf\x02\xc4\x56\x92\xd7\x23\xc7\xcf\x93\xc4\x1c\x12\x75\x8c\x69\x90\x19\x3d\xe1\x91\xa3\x74\xe2\xc9\x44\x03\x2c\xbe\xce\x96\x7e\x56\xa3\x7a\x1a\xef\xef\x36\x9b\x5b\xf7\x1b\x00\x00\xff\xff\x5e\xf5\x4c\x90\xf9\x00\x00\x00"

func nodeShBytes() ([]byte, error) {
	return bindataRead(
		_nodeSh,
		"node.sh",
	)
}

func nodeSh() (*asset, error) {
	bytes, err := nodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf0, 0xd0, 0x86, 0x91, 0x39, 0xe6, 0x34, 0x92, 0x5a, 0x49, 0x15, 0xd9, 0x4f, 0xa, 0xea, 0x73, 0xc1, 0x31, 0x20, 0x7, 0x47, 0x6f, 0xc, 0x74, 0x5c, 0xf2, 0x55, 0xf5, 0x7, 0x3a, 0x80, 0x89}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client.sh": clientSh,

	"master.sh": masterSh,

	"node.sh": nodeSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"client.sh": &bintree{clientSh, map[string]*bintree{}},
	"master.sh": &bintree{masterSh, map[string]*bintree{}},
	"node.sh":   &bintree{nodeSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
